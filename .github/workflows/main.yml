# .github/workflows/main.yml

name: Playwright Tests CI

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  # ===============================================
  # 0. JOB DE VERIFICACI√ìN DE CALIDAD (LINT & FORMAT)
  # ===============================================
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üßπ Run Linting (ESLint)
        # Ejecuta el script 'lint' que definiste: npx eslint --ext .ts,.js .
        run: npm run lint

      - name: ‚úçÔ∏è Run Formatting Check (Prettier)
        # Usaremos 'prettier --check' para que falle si hay archivos mal formateados
        run: npx prettier --check "**/*.{ts,js,json,css,html,md}"


  # ===============================================
  # 1. JOB DE PRUEBAS DE UI (PARALELO)
  # ===============================================
  ui-tests:
    timeout-minutes: 15
    # üö® DEPENDENCIA: Espera a que la calidad de c√≥digo sea exitosa
    needs: quality-checks 
    strategy:
      fail-fast: false
      matrix:
        project: [ui-chromium, ui-firefox] 

    runs-on: ubuntu-latest
    
    # L√≥gica de Seguridad: Solo ejecuta si no es un PR de un fork.
    if: github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üåê Install Playwright browsers
        run: npx playwright install --with-deps

      - name: ‚ñ∂Ô∏è Run UI Tests (${{ matrix.project }})
        run: npx playwright test --project=${{ matrix.project }}
        env:
          USER_EMAIL: ${{ secrets.UI_USER_EMAIL }}
          USER_PASSWORD: ${{ secrets.UI_USER_PASSWORD }}

      - name: üìä Upload Report Artifact (${{ matrix.project }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-report-${{ matrix.project }} 
          path: playwright-report/ 
          retention-days: 30

  # ===============================================
  # 2. JOB DE PRUEBAS DE API (SECUENCIAL)
  # ===============================================
  api-tests:
    timeout-minutes: 5
    runs-on: ubuntu-latest
    
    # üö® DEPENDENCIA: Depende de 'quality-checks' y 'ui-tests'
    needs: [quality-checks, ui-tests]

    # L√≥gica de Ejecuci√≥n Forzada Y Seguridad:
    # 1. 'always()' para que se ejecute incluso si ui-tests falla.
    # 2. La condici√≥n de seguridad previene la exposici√≥n de secretos en forks.
    if: always() && (github.event_name == 'push' || github.repository == github.event.pull_request.head.repo.full_name)

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v4

      - name: üõ†Ô∏è Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Install dependencies
        run: npm ci

      - name: üåê Install Playwright browsers
        run: npx playwright install --with-deps

      - name: ‚ñ∂Ô∏è Run API Tests (Sequential)
        run: npx playwright test --project=api-mode
        env:
          USER_NAME: ${{ secrets.API_USERNAME }}
          PASSWORD: ${{ secrets.API_PASSWORD }}

      - name: üìä Upload API Report Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: html-report-api
          path: playwright-report/
          retention-days: 30